##########################################
#                                        #
# This package contains the sensors I    #
# use for my security monitoring         #
#                                        #
# DEPENDS ON: Occupancy                  #
#                                        #
##########################################
      
      
alarm_control_panel:
  platform: manual_mqtt
  name: "Alarm"
  code: !secret alarm_code
  state_topic: homeassistant/alarm
  command_topic: homeassistant/alarm/set
  pending_time: 10


sensor:
  - platform: haveibeenpwned
    email: !secret haveibeenpwned_email

  - platform: mqtt
    name: "Doorbell"
    state_topic: "home-assistant/doorbell"

binary_sensor:
  platform: mqtt
  state_topic: "/sensor-zero/motion/motion"
  name: "TEST-Motion"
  payload_on: 1
  payload_off: 0
  device_class: motion


automation:
  - alias: Doorbell test
    initial_state: 'on'
    trigger:
      platform: mqtt
      topic: home-assistant/doorbell
      payload: 'Ring'
    action:
      service: notify.mf
      data:
        message: 'Doorbell test'

  - alias: Set the alarm when unoccupied
    initial_state: 'on'
    trigger:
      platform: state
      entity_id: sensor.home_status
      to: 'Unoccupied'
    action:
      - service: tts.google_say
        entity_id: media_player.everywhere
        data:
          message: 'The house is unoccupied, the alarm will set in 30 seconds if not overridden'
      - delay: 00:00:30
      - condition: state
        entity_id: sensor.home_status
        state: 'Unoccupied'
      - service: alarm_control_panel.alarm_arm_away
        data:
          entity_id: alarm_control_panel.alarm
          code: !secret alarm_code

  - alias: Disarm alarm when occupied
    initial_state: 'on'
    trigger:
      platform: state
      entity_id: sensor.home_status
      to: 'Occupied'
    action:
      service: alarm_control_panel.alarm_disarm
      data:
        entity_id: alarm_control_panel.alarm
        code: !secret alarm_code

  - alias: Send notification upon failed login attempt
    initial_state: 'on'
    trigger:
      platform: state
      entity_id: persistent_notification.httplogin
    condition:
      condition: template
      value_template: "{{ trigger.to_state.state != off }}"
    action:
      service: notify.mf
      data_template:
        message: "{{ trigger.to_state.state }}"

  - alias: Breach email haveibeenpwned
    initial_state: 'on'
    trigger:
      - platform: numeric_state
        entity_id: !secret sensor_email_cf
        above: 0
      - platform: numeric_state
        entity_id: !secret sensor_email_hass
        above: 0
      - platform: numeric_state
        entity_id: !secret sensor_email_df
        above: 0
      - platform: numeric_state
        entity_id: !secret sensor_email_ls
        above: 1
      - platform: numeric_state
        entity_id: !secret sensor_email_vf
        above: 0
      - platform: numeric_state
        entity_id: !secret sensor_email_social
        above: 0
      - platform: numeric_state
        entity_id: !secret sensor_email_run
        above: 0
      - platform: numeric_state
        entity_id: !secret sensor_email_personal
        above: 0
    action:
      service: notify.mf
      data_template:
        message: 'Warning - HaveIbeenPwned detected {{trigger.to_state.attributes.friendly_name}}'