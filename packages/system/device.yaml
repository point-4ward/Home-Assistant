###########################################################
#                                                         #
# This package contains the components and sensors I use  #
# to monitor the Homeassistant software and system itself #
#                                                         #
###########################################################


recorder:
  purge_interval: 3
  purge_keep_days: 10


logbook:
  include:
    entities:
      - switch.heater
      - input_boolean.guest_mode
      - input_boolean.away_mode
      - input_boolean.holiday_mode
    domains:
      - alarm_control_panel
      - alert
      - light
      - sensor
      - binary_sensor
      - device_tracker
      - zwave

  exclude:
    entities:
      - sensor.time
      - sensor.date
      - light.lr_left
      - light.lr_right
      - light.mb_ceiling
      - light.mb_stairs
      - light.bathroom_g


history:
  use_include_order: True
  include:
    entities:
      - switch.heater
      - input_boolean.guest_mode
      - input_boolean.away_mode
      - input_boolean.holiday_mode
    domains:
      - alarm_control_panel
      - alert
      - light
      - sensor
      - binary_sensor
      - device_tracker
      - zwave

  exclude:
    entities:
      - sensor.time
      - sensor.date
      - light.lr_left
      - light.lr_right
      - light.mb_ceiling
      - light.mb_stairs
      - light.bathroom_g


sensor:
  - platform: systemmonitor
    resources:
      - type: disk_use_percent
        arg: /
      - type: memory_use_percent
      - type: processor_use
      - type: last_boot

  - platform: rest
    resource: https://pypi.python.org/pypi/homeassistant/json
    name: HA upstream
    value_template: '{{ value_json.info.version }}'
    scan_interval: 3600


automation:
  - alias: Check status of automations
    initial_state: 'on'
    trigger:
      - platform: homeassistant
        event: start
      - platform: time
        hours: '/1'
        minutes: 00
        seconds: 00
    action:
      - delay: 00:02:00
      - service: python_script.all_automations_counter
      - service: python_script.on_automations_counter
      - delay: 00:00:30
      - condition: template
        value_template: '{{ ((states.sensor.automation_on.state) != (states.sensor.automation_all.state)) }}'
      - service: persistent_notification.create
        data:
          notification_id: "Automations_counter"
          title: "Automations alert"
          message: "Some automations are disabled."

  - alias: Update Available Notifications
    initial_state: 'on'
    trigger:
      platform: state
      entity_id: sensor.ha_upstream
    action:
      - delay: '00:30:00'
      - service: notify.mf
        data:
          message: 'Update for Home Assistant is available.  https://home-assistant.io/blog/'

  - alias: Disk Use Alarm
    initial_state: 'on'
    trigger:
      platform: numeric_state
      entity_id: sensor.disk_used_
      above: 85
    action:
      - service: notify.mf
        data_template:
          message: "Your harddrive is running out of Space! /dev/root:{{ states.sensor.disk_use_.state }}%!"
      - service: persistent_notification.create
        data_template:
          title: "Hard Drive Monitor:"
          message: "Your harddrive is running out of Space! /dev/root:{{ states.sensor.disk_use_.state }}%!"
          notification_id: "Critical Alert"

  - alias: System load alarm
    initial_state: on
    trigger:
      - platform: numeric_state
        entity_id: sensor.cpu_used
        above: 85
      - platform: numeric_state
        entity_id: sensor.ram_used
        above: 85
    action:
      - service: notify.mf
        data_template:
          message: "Your system is running under heavy load! CPU:{{states.sensor.cpu_used.state}}% Memory:{{ states.sensor.ram_used.state }}%!"
      - service: persistent_notification.create
        data_template:
          title: "System Load Monitor:"
          message: "Your system is running under heavy load! CPU:{{states.sensor.cpu_used.state}}% Memory:{{ states.sensor.ram_used.state }}%!"
          notification_id: "Critical Alert"

  - alias: Power cut notification
    initial_state: 'on'
    trigger:
      platform: homeassistant
      event: start
    condition:
      condition: state
      entity_id: input_boolean.maintenance_mode
      state: 'off'
    action:
      - service: notify.mf
        data_template:
          message: "Home Assistant has restarted and is not in Maintenance Mode.  Power cut?"
          data:
            keyboard:
              - '/status'
              - '/maintenance'
