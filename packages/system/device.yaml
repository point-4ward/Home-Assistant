###########################################################
#                                                         #
# This package contains the components and sensors I use  #
# to monitor the Homeassistant software and system itself #
#                                                         #
###########################################################


sensor:
  - platform: cpuspeed

  - platform: systemmonitor
    resources:
      - type: disk_use_percent
        arg: /
      - type: memory_use_percent
      - type: processor_use
      - type: last_boot
      - type: since_last_boot
      
  - platform: version
    name: Installed HA version

  - platform: rest
    resource: https://pypi.python.org/pypi/homeassistant/json
    name: HA upstream
    value_template: '{{ value_json.info.version }}'
    scan_interval: 3600


automation:
  - alias: 'Check status of automations'
    initial_state: 'on'
    trigger:
      - platform: homeassistant
        event: start
      - platform: time
        hours: '/1'
        minutes: 00
        seconds: 00
    action:
      - service: python_script.all_automations_counter
      - service: python_script.on_automations_counter
      - delay: 00:00:30
      - condition: template
        value_template: '{{ ((states.sensor.automation_on.state) != (states.sensor.automation_all.state)) }}'
      - service: persistent_notification.create
        data:
          title: "Automations alert"
          message: "Some automations are disabled."

  - alias: 'Update Available Notifications'
    initial_state: 'on'
    trigger:
      platform: state
      entity_id: sensor.ha_upstream
    action:
      - delay: '00:30:00'
      - service: notify.mf
        data:
          message: 'Update for Home Assistant is available.  https://home-assistant.io/blog/'

  - alias: 'Disk Use Alarm'
    initial_state: 'on'
    trigger:
      platform: numeric_state
      entity_id: sensor.disk_used_
      above: 80
    action:
      - service: notify.mf
        data:
          message: 'Your harddrive is running out of Space!'
      - service: persistent_notification.create
        data:
          title: "Hard Drive Monitor:"
          message: "Your harddrive is running out of Space! /dev/root:{{ states.sensor.disk_use_.state }}%!"
          notification_id: "Critical Alert"

  - alias: 'Power cut notification'
    initial_state: 'on'
    trigger:
      platform: homeassistant
      event: start
    condition:
      condition: state
      entity_id: input_boolean.maintenance_mode
      state: 'off'
    action:
      - service: notify.mf
        data_template:
          message: "Home Assistant has restarted and is not in Maintenance Mode.  Power cut?"
          data:
            keyboard:
              - '/status'
              - '/maintenance'
      - condition: and
        conditions:
          - condition: state
            entity_id: sensor.home_status
            state: 'Occupied'
          - condition: or
            conditions:
              - condition: time
                after: '07:30:00'
              - condition: time
                before: '22:00:00'
      - service: tts.google_say
        entity_id: media_player.downstairs
        data:
          message: 'The system is online.'

  - alias: Alert for invalid configuration
    initial_state: 'on'
    trigger:
      platform: template
      value_template: '{{ states.persistent_notification.invalid_config.state != null }}'
    action:
      service: notify.mf
      data_template:
        message: "Home assistant is registering an invalid configuration."
        data:
          keyboard:
           - '/status'
           - '/maintenance'
           - '/restart'

  - alias: Alert when a critical device goes offline
    initial_state: 'on'
    trigger:
      - platform: state
        entity_id: binary_sensor.broadlink
        to: 'off'
        for:
          minutes: 2
      - platform: state
        entity_id: binary_sensor.hue_hub
        to: 'off'
        for:
          minutes: 2
      - platform: state
        entity_id: binary_sensor.tp_link
        to: 'off'
        for:
          minutes: 2  
      - platform: state
        entity_id: binary_sensor.cctv
        to: 'off'
        for:
          minutes: 2
    action:
      service: notify.mf
      data_template:
        message: '{{trigger.to_state.attributes.friendly_name}} has gone offline.'

  - alias: battery_alert
    initial_state: 'on'
    trigger:
      platform: time
      at: '19:00:00'
    condition:
      condition: template
      value_template: >-
        {% macro battery_level() %}
          {%- set threshold = 20 -%}
          {% set domains = ['switch', 'sensor', 'zwave'] %}
          {% for domain in domains -%}
          {% for item in states[domain] if ((item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) or ("battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown"))) -%}
          {% if (item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) -%}
          {{ item.name }} ({{ item.attributes['battery_level'] }}){%- if not loop.last %}, {% endif -%}{% endif -%}
          {% if "battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown") -%}
          {{ item.name }} ({{ item.state }}){% if not loop.last %}, {%- endif %} {% endif -%}
          {% endfor %}
          {%- endfor %}
          {% endmacro %}
          {{ battery_level() |trim != "" }}
    action:
      - service: persistent_notification.create
        data_template:
          title: Low Battery levels
          notification_id: low-battery-alert
          message: >
            {% macro battery_level() %}
            {%- set threshold = 20 -%}
            {% set domains = ['switch', 'sensor', 'zwave'] %}
            {% for domain in domains -%}
            {% for item in states[domain] if ((item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) or ("battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown"))) -%}
            {% if (item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) -%}
            {{ item.name }} ({{ item.attributes['battery_level'] }}){%- if not loop.last %}, {% endif -%}{% endif -%}
            {% if "battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown") -%}
            {{ item.name }} ({{ item.state }}){% if not loop.last %}, {%- endif %} {% endif -%}
            {% endfor %}
            {%- endfor %}
            {% endmacro %}
            {{ battery_level() }}
      - service: notify.mf
        data_template:
          title: "Battery status"
          message: >-
            {% macro battery_level() %}
            {%- set threshold = 20 -%}
            {% set domains = ['switch', 'sensor', 'zwave'] %}
            {% for domain in domains -%}
            {% for item in states[domain] if ((item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) or ("battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown"))) -%}
            {% if (item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) -%}
            {{ item.name }} ({{ item.attributes['battery_level'] }}){%- if not loop.last %}, {% endif -%}{% endif -%}
            {% if "battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown") -%}
            {{ item.name }} ({{ item.state }}){% if not loop.last %}, {%- endif %} {% endif -%}
            {% endfor %}
            {%- endfor %}
            {% endmacro %}
            {{ battery_level()}}