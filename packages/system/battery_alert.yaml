################################################################
## Packages / Battery Alert
################################################################


homeassistant:
  customize:
    group.battery_alert:
      state_card_mode: badges

    sensor.bathroom_motion_motion_battery:
      friendly_name: Bathroom sensor

    sensor.living_room_switch_battery:
      friendly_name: Livingroom switch


group:
  battery alert:
    - sensor.bathroom_motion_motion_battery
    - sensor.living_room_switch_battery

  Batteries:
    control: hidden
    entities:
      - group.battery_alert


automation:
  - alias: Battery
    trigger:
      platform: time
      hours: '/2'
      minutes: 00
      seconds: 00
    condition:
      condition: template
      value_template: >
          {% macro battery_level() %}
            {%- for item in states.sensor if (
              "battery" in item.name | lower
              and not "voltage" in item.name | lower
              and not "runtime" in item.name | lower
              and not "setpoint" in item.name | lower
              and not "charge" in item.name | lower
              and not is_state_attr(item.entity_id, 'battery_alert_disabled', true)
            ) and (
              (
                (
                  item.state is number
                  or item.state | length == item.state | int | string | length
                  or item.state | length == item.state | float | string | length
                )
                and item.state | int < 20
              )
              or item.state | lower == "low"
              or item.state | lower == "unknown"
            ) -%}
            {{ item.name }} ({{ item.state }}){% if not loop.last %}, {% endif %}
            {%- endfor -%}
          {% endmacro %}
          {{ battery_level() | trim != "" and not is_state_attr('persistent_notification.lowbatteryalert', 'message', battery_level()) }}
    action:
      - service: persistent_notification.create
        data_template:
          title: "Low Battery levels"
          notification_id: low-battery-alert
          message: >
            {% macro battery_level() %}
              {%- for item in states.sensor if (
                "battery" in item.name | lower
                and not "voltage" in item.name | lower
                and not "runtime" in item.name | lower
                and not "setpoint" in item.name | lower
                and not "charge" in item.name | lower
                and not is_state_attr(item.entity_id, 'battery_alert_disabled', true)
              ) and (
                (
                  (
                    item.state is number
                    or item.state | length == item.state | int | string | length
                    or item.state | length == item.state | float | string | length
                  )
                  and item.state | int < 20
                )
                or item.state | lower == "low"
                or item.state | lower == "unknown"
              ) -%}
              {{ item.name }} ({{ item.state }}){% if not loop.last %}, {% endif %}
              {%- endfor -%}
            {% endmacro %}
            {{ battery_level() }}
      - service: notify.mf
        data_template:
          title: "Battery alert:"
          message: >
            {% macro battery_level() %}
              {%- for item in states.sensor if (
                "battery" in item.name | lower
                and not "voltage" in item.name | lower
                and not "runtime" in item.name | lower
                and not "setpoint" in item.name | lower
                and not "charge" in item.name | lower
                and not is_state_attr(item.entity_id, 'battery_alert_disabled', true)
              ) and (
                (
                  (
                    item.state is number
                    or item.state | length == item.state | int | string | length
                    or item.state | length == item.state | float | string | length
                  )
                  and item.state | int < 20
                )
                or item.state | lower == "low"
                or item.state | lower == "unknown"
              ) -%}
              {{ item.name }} ({{ item.state }}){% if not loop.last %}, {% endif %}
              {%- endfor -%}
            {% endmacro %}
            {{ battery_level() }}


  - alias: battery_sensor_from_battery_level_attribute
    trigger:
      platform: event
      event_type: state_changed
    condition:
      - condition: template
        value_template: "{{ trigger.event.data is not none }}"
      - condition: template
        value_template: "{{ trigger.event.data.new_state is not none }}"
      - condition: template
        value_template: "{{ trigger.event.data.new_state.attributes is not none }}"
      - condition: template
        value_template: "{{ trigger.event.data.old_state is not none }}"
      - condition: template
        value_template: "{{ trigger.event.data.new_state.attributes.battery_level is defined }}"
      - condition: template
        value_template: "{{ 'battery' not in trigger.event.data.new_state.name | lower }}"
    action:
      - service: mqtt.publish
        data_template:
          topic: "homeassistant/sensor/{{ trigger.event.data.new_state.object_id }}_battery/config"
          retain: true
          payload: >-
            {
              "device_class": "sensor",
              "name": "{{ trigger.event.data.new_state.name }} Battery",
              "state_topic": "homeassistant/sensor/{{ trigger.event.data.new_state.object_id }}_battery/state",
              "unit_of_measurement": "%"
            }
      - service: mqtt.publish
        data_template:
          topic: "homeassistant/sensor/{{ trigger.event.data.new_state.object_id }}_battery/state"
          retain: true
          payload: "{{ trigger.event.data.new_state.attributes.battery_level | int }}"

  - alias: battery_sensor_from_battery_attribute
    trigger:
      platform: event
      event_type: state_changed
    condition:
      - condition: template
        value_template: "{{ trigger.event.data is not none }}"
      - condition: template
        value_template: "{{ trigger.event.data.new_state is not none }}"
      - condition: template
        value_template: "{{ trigger.event.data.new_state.attributes is not none }}"
      - condition: template
        value_template: "{{ trigger.event.data.old_state is not none }}"
      - condition: template
        value_template: "{{ trigger.event.data.new_state.attributes.battery is defined }}"
      - condition: template
        value_template: "{{ 'battery' not in trigger.event.data.new_state.name | lower }}"
    action:
      - service: mqtt.publish
        data_template:
          topic: "homeassistant/sensor/{{ trigger.event.data.new_state.object_id }}_battery/config"
          retain: true
          payload: >-
            {
              "device_class": "sensor",
              "name": "{{ trigger.event.data.new_state.name }} Battery",
              "state_topic": "homeassistant/sensor/{{ trigger.event.data.new_state.object_id }}_battery/state",
              "unit_of_measurement": "%"
            }
      - service: mqtt.publish
        data_template:
          topic: "homeassistant/sensor/{{ trigger.event.data.new_state.object_id }}_battery/state"
          retain: true
          payload: "{{ trigger.event.data.new_state.attributes.battery | int }}"

  - alias: battery_sensor_from_battery_numeric_attribute
    trigger:
      platform: event
      event_type: state_changed
    condition:
      - condition: template
        value_template: "{{ trigger.event.data is not none }}"
      - condition: template
        value_template: "{{ trigger.event.data.new_state is not none }}"
      - condition: template
        value_template: "{{ trigger.event.data.new_state.attributes is not none }}"
      - condition: template
        value_template: "{{ trigger.event.data.old_state is not none }}"
      - condition: template
        value_template: "{{ trigger.event.data.new_state.attributes['Battery numeric'] is defined }}"
      - condition: template
        value_template: "{{ 'battery' not in trigger.event.data.new_state.name | lower }}"
    action:
      - service: mqtt.publish
        data_template:
          topic: "homeassistant/sensor/{{ trigger.event.data.new_state.object_id }}_battery/config"
          retain: true
          payload: >-
            {
              "device_class": "sensor",
              "name": "{{ trigger.event.data.new_state.name }} Battery",
              "state_topic": "homeassistant/sensor/{{ trigger.event.data.new_state.object_id }}_battery/state",
              "unit_of_measurement": "%"
            }
      - service: mqtt.publish
        data_template:
          topic: "homeassistant/sensor/{{ trigger.event.data.new_state.object_id }}_battery/state"
          retain: true
          payload: "{{ (trigger.event.data.new_state.attributes['Battery numeric'] | int + 1) * 10 }}"