###################################################
#                                                 #
# This package contains the components I use to   #
# notify, and be notified by, homeassistant       #
# and an engine that translates the notifications #
# in to text messages and to TTS (see include)    #
#                                                 #
###################################################


tts:
  platform: google
  cache: false


telegram_bot:
  platform: polling
  api_key: !secret telegram_bot_api_key
  parse_mode: html
  allowed_chat_ids:
    - !secret telegram_bot_chat_id_mf
    - !secret telegram_bot_chat_id_ls
#    - !secret telegram_bot_chat_id_cg


notify:
  - platform: telegram
    name: mf
    chat_id: !secret telegram_bot_chat_id_mf

  - platform: telegram
    name: ls
    chat_id: !secret telegram_bot_chat_id_ls

  #- platform: telegram
  #  name: cg
  #  chat_id: !secret telegram_bot_chat_id_ccg
  #
  # - platform: group
  #   name: all
  #   services:
  #     - service: mf
  #     - service: ls
  #     - service: cg

  - platform: group
    name: adults
    services:
      - service: mf
      - service: ls

binary_sensor:
  platform: random


script:
  link_engine:
    sequence:
      - service: script.link_notify
        data_template: !include ../../extras/includes/link_engine.yaml

  link_notify:
    sequence:
      - service: script.link_speak
        data_template:
          media_player: '{{ media_player }}'
          message: '{{ message }}'
      - service: script.link_send_text
        data_template:
          message: '{{ message }}'

  link_send_text:
    sequence:
#TODO - template for who?
      - service: notify.mf
        data_template:
          message: '{{ message | replace("\n","") | replace("   ","") | replace("  "," ") }}'
          data:
            keyboard:
              - '/status'
              - '/maintenance'

  link_speak:
    sequence:
#TODO - ....
      # - condition: and
      #   conditions:
      #     - condition: or
      #       conditions:
      #         - condition: state
      #           entity_id: group.adults
      #           state: 'home'
      #         - condition: state
      #           entity_id: input_boolean.guest_mode
      #           state: 'on'
      # - wait_template: "{{ not is_state( media_player, 'playing') }}"
      #   timeout: 00:01:00
      - service: media_player.volume_set
        data_template:
          entity_id: '{{ media_player }}'
          #TODO - set volume level wih a template
          volume_level: '{{ states.input_number.link_notification_volume.state }}'
      - service: tts.google_say
        data_template:
          entity_id: '{{ media_player }}'
          message: '{{ message | replace("\n","") | replace("   ","") | replace("  "," ") }}'
